{"version":3,"sources":["Store/Actions/AppActions.tsx","Models/AppContextInterface.tsx","Store/Context/AppContext.tsx","Store/Reducers/AppReducers.tsx","Components/Header/Header.tsx","Utils/Date.tsx","Components/DatePicker/DatePicker.tsx","Utils/Carbon.tsx","Components/UsageForm/UsageForm.tsx","Components/ApiKeyInput/ApiKeyInput.tsx","Components/CarbonUsage/CarbonUsage.tsx","Components/UsageCalculate/UsageCalculate.tsx","Store/Effects/AppEffects.tsx","Services/Carbon.tsx","App.tsx","Utils/MaterialUi.tsx","reportWebVitals.ts","index.tsx"],"names":["AppActionType","defaultAppContext","data","date","Date","i","push","getTime","location","usage","generateWeek","carbonCalculationResults","carbonCalculationLoading","carbonApiKey","AppContext","React","createContext","state","dispatch","appReducer","action","type","UpdateUserData","userDataInd","findIndex","userData","payload","field","value","UpdateCarbonApiKey","key","CalculateWeeklyData","CalculateDataSucceed","carbonData","existingInd","CalculateDataFailed","Header","className","Typography","gutterBottom","variant","component","months","days","DatePicker","useContext","handleUserDataChange","infinite","slidesToShow","dots","customPaging","map","ind","Card","CardContent","monthInd","getMonth","getDate","dayInd","getDay","Divider","style","margin","handleFormChange","supportedCountries","sort","UsageForm","Grid","container","item","xs","spacing","FormControl","InputLabel","htmlFor","Select","native","onChange","target","country","toLowerCase","FormHelperText","id","Input","parseInt","Math","round","ApiKeyInput","Box","rel","href","TextField","label","CarbonUsage","Chart","defaults","color","calculationResultsSorted","o1","o2","chartData","labels","result","toDateString","datasets","carbonKg","backgroundColor","md","marginBottom","align","reduce","val","newVal","UsageCalculate","disabled","some","Tooltip","title","arrow","Button","onClick","apiKey","forEach","a","electricity","fetch","method","body","JSON","stringify","headers","then","resp","json","message","Error","carbonG","attributes","carbon_g","carbon_kg","carbonLb","carbon_lb","carbonMt","carbon_mt","catch","err","console","log","CalculateCarbonEffect","App","useReducer","Provider","ThemeProvider","theme","createTheme","palette","primary","main","secondary","typography","h3","fontSize","h4","LinearProgress","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.113b964c.chunk.js","sourcesContent":["import { CarbonEmissionResult, UserElectricityMetrics } from \"src/Models\";\r\n\r\nexport enum AppActionType {\r\n  UpdateUserData,\r\n  UpdateCarbonApiKey,\r\n  CalculateWeeklyData,\r\n  CalculateDataSucceed,\r\n  CalculateDataFailed,\r\n}\r\n\r\nexport interface UpdateUserData {\r\n  type: AppActionType.UpdateUserData,\r\n  payload: { \r\n    date: Date,\r\n    field: keyof UserElectricityMetrics,\r\n    value: string | number,\r\n  }\r\n}\r\n\r\nexport interface UpdateCarbonApiKey {\r\n  type: AppActionType.UpdateCarbonApiKey,\r\n  payload: { key: string }\r\n}\r\n\r\nexport interface CalculateWeeklyData {\r\n  type: AppActionType.CalculateWeeklyData,\r\n}\r\n\r\nexport interface CalculateDataSucceed {\r\n  type: AppActionType.CalculateDataSucceed,\r\n  payload: CarbonEmissionResult,\r\n}\r\n\r\nexport interface CalculateDataFailed {\r\n  type: AppActionType.CalculateDataFailed,\r\n}\r\n\r\nexport type AppActions = UpdateUserData | CalculateWeeklyData | CalculateDataSucceed | UpdateCarbonApiKey | CalculateDataFailed;\r\n","import { CarbonEmissionResult } from './CarbonEmissionResult';\r\nimport { UserElectricityMetrics } from './UserElectricityMetrics';\r\n\r\n/**\r\n * Generates the initial 7 days user data with empty fields\r\n * Used to initiate the state\r\n * \r\n * @TODO Implement the possibility to save the data so that after refersh it would rehydrate instead of generate new\r\n * \r\n * @returns UserElectricityMetrics[]\r\n */\r\nconst generateWeek: () => UserElectricityMetrics[] = () => {\r\n  const data: UserElectricityMetrics[] = [];\r\n  let date: Date = new Date();\r\n  let day = 60 * 60 * 24 * 1000;\r\n\r\n  for (var i = 0; i <= 6; i++) {\r\n    data.push({\r\n      date: new Date(date.getTime() + day * i),\r\n      location: 'de', // Let DE to be default\r\n      usage: 0,\r\n    });\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\nexport interface AppContextInterface  { \r\n  data: UserElectricityMetrics[];\r\n  carbonCalculationResults: CarbonEmissionResult[];\r\n  carbonCalculationLoading: boolean;\r\n  carbonApiKey: string;\r\n}\r\n\r\nexport const defaultAppContext: AppContextInterface = {\r\n  data: generateWeek(),\r\n  carbonCalculationResults: [],\r\n  carbonCalculationLoading: false,\r\n  carbonApiKey: '',\r\n}\r\n","import React from 'react';\r\n\r\nimport { AppContextInterface, defaultAppContext } from 'src/Models';\r\nimport { AppActions } from 'src/Store';\r\n\r\nconst AppContext = React.createContext<\r\n  { \r\n    state: AppContextInterface, \r\n    dispatch: React.Dispatch<AppActions> \r\n  }\r\n>({\r\n  state: defaultAppContext,\r\n  dispatch: () => undefined,\r\n});\r\n\r\nexport { AppContext };\r\n","import { AppContextInterface } from 'src/Models';\r\nimport { AppActions, AppActionType } from 'src/Store';\r\n\r\nexport const appReducer = (state: AppContextInterface, action: AppActions): AppContextInterface => {\r\n  switch (action.type) {\r\n    case AppActionType.UpdateUserData: {\r\n      const data = state.data;\r\n      const userDataInd = data.findIndex((userData) => userData.date === action.payload.date);\r\n\r\n      data[userDataInd] = {\r\n        ...data[userDataInd],\r\n        [action.payload.field]: action.payload.value,\r\n      }\r\n\r\n      return { ...state, data, };\r\n    }\r\n\r\n    case AppActionType.UpdateCarbonApiKey: {\r\n      return {...state, carbonApiKey: action.payload.key}\r\n    }\r\n\r\n    case AppActionType.CalculateWeeklyData: {\r\n      return { ...state, carbonCalculationLoading: true, };\r\n    }\r\n\r\n    case AppActionType.CalculateDataSucceed: {\r\n      const carbonData = state.carbonCalculationResults;\r\n      const existingInd = carbonData.findIndex((data) => data.date === action.payload.date);\r\n\r\n      existingInd >= 0 ? carbonData[existingInd] = action.payload : carbonData.push(action.payload);\r\n\r\n      return { ...state, carbonCalculationLoading: false, };\r\n    }\r\n\r\n    case AppActionType.CalculateDataFailed: {\r\n      // @TODO Make the payload with error message to be stored and used in errors component\r\n      return { ...state, carbonCalculationLoading: false, };\r\n    }\r\n\r\n    default:\r\n    return state;\r\n  }\r\n}","import React from 'react';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nimport './header.scss';\r\n\r\nexport const Header: React.FC = () => {\r\n  return (\r\n    <header className=\"app-header-component\">\r\n      <div className=\"content\">\r\n        <Typography gutterBottom variant=\"h3\" component=\"h1\" >\r\n          Carbon Usage Calculator\r\n        </Typography>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n","const months: string[] = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Dec'];\r\nconst days: string[] = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fr', 'Sat'];\r\n\r\n// @TODO Create specialized type for number range between 0 - 12 for months\r\nexport const getMonthName: (monthInd: number) => string = (monthInd) => {\r\n  // @todo remove if case when proper typing is created\r\n  if (monthInd < 12 && monthInd >= 0) {\r\n    return months[monthInd];\r\n  }\r\n\r\n  return '';\r\n}\r\n\r\n// @TODO Create specialized type for number range between 0 - 7 for days\r\nexport const getDayName: (dayInd: number) => string = (dayInd) => {\r\n  // @todo remove if case when proper typing is created\r\n  if (dayInd < 7 && dayInd >= 0) {\r\n    return days[dayInd];\r\n  }\r\n\r\n  return '';\r\n}","import React, { useContext } from 'react';\r\nimport Slider from 'react-slick';\r\nimport { Card, CardContent, Typography, Divider } from '@material-ui/core';\r\n\r\nimport './datePicker.scss';\r\nimport { AppActionType, AppContext } from 'src/Store';\r\nimport { UsageForm } from 'src/Components';\r\nimport { getDayName, getMonthName } from 'src/Utils/Date';\r\nimport { UserElectricityMetrics } from 'src/Models';\r\n\r\nexport const DatePicker: React.FC = () => {\r\n  const { state, dispatch } = useContext(AppContext);\r\n\r\n  const handleUserDataChange: (date: Date, field: keyof UserElectricityMetrics, value: string | number) => any = (date, field, value) => {\r\n    dispatch({\r\n      type: AppActionType.UpdateUserData,\r\n      payload: {date, field, value}\r\n    })\r\n  }\r\n\r\n  const customDotsRenderer: (i: number) => JSX.Element = (i) => <button className={`${!state.data[i].location || !state.data[i].usage ? 'unfilled' : 'filled'}`}>{i}</button>;\r\n\r\n  return (  \r\n    <div className=\"date-picker-component content\">\r\n      <Typography gutterBottom variant=\"h4\" component=\"h2\" >\r\n        Fill Your Electricity Usage Data\r\n      </Typography>\r\n      <div className=\"slider-container\">\r\n        <Slider infinite={false} slidesToShow={1} dots customPaging={customDotsRenderer} >\r\n          {\r\n            state.data.map((userData, ind) => \r\n            <div className=\"card-container\" key={ind}>\r\n              <Card variant=\"outlined\">\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" component=\"h3\">\r\n                    {getMonthName(userData.date.getMonth())} {userData.date.getDate()}\r\n                  </Typography>\r\n                  <Typography gutterBottom variant=\"h5\" component=\"h3\">\r\n                    {getDayName(userData.date.getDay())}\r\n                  </Typography>\r\n                  <Divider style={{ margin: '20px 0' }} />\r\n                  <UsageForm {...userData} handleFormChange={handleUserDataChange} />\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n            )\r\n          }\r\n        </Slider>\r\n      </div>  \r\n    </div>\r\n  );\r\n}\r\n","/**\r\n * Only these countries are supported, some countries support also regions, but for simplicity we ignore that\r\n * https://www.notion.so/4b4f41db73254b4b915ba01d55eba7e7?v=4ad0efe7763540ab801fadd9f3bf1ce0\r\n */\r\nexport const supportedCountries: string[] = [\r\n  'US', 'CA', 'AT', 'BE', 'BG', 'HR', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'GU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'GB'\r\n].sort();","import React from 'react';\r\nimport { FormControl, InputLabel, Input, FormHelperText, Select, Grid } from '@material-ui/core';\r\n\r\nimport { UserElectricityMetrics } from 'src/Models';\r\nimport { supportedCountries } from 'src/Utils/Carbon';\r\n\r\n/**\r\n * @TODO Ignore TAB Key Press as it causes weird behavior of the slick slider\r\n */\r\nexport const UsageForm: React.FC<Props> = ({location, usage, date, handleFormChange}) => {\r\n  return (\r\n    <form>\r\n      <Grid container>\r\n        <Grid item xs={4} spacing={1}>\r\n          <FormControl>\r\n            <InputLabel htmlFor=\"location\">Location</InputLabel>\r\n            <Select aria-describedby=\"user's location\" native value={location} onChange={({ target }) => handleFormChange(date, 'location', target.value as string)}>\r\n              <option aria-label=\"None\" value=\"\" />\r\n              {\r\n                supportedCountries.map((country, ind) => \r\n                  <option key={ind} value={country.toLowerCase()}>{country}</option>\r\n                )\r\n              }\r\n            </Select>\r\n            <FormHelperText id=\"Your Location\">Your Current Location</FormHelperText>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item xs={8}>\r\n          <FormControl>\r\n            <InputLabel htmlFor=\"location\">Electricity Usage</InputLabel> \r\n            <Input \r\n              aria-describedby=\"user's location\" \r\n              type=\"number\" \r\n              value={!!usage ? usage : ''}\r\n              // Using only decimal numbers as per the requirements though would be good to test and enable float values for API requests\r\n              onChange={({ target }) => { handleFormChange(date, 'usage', parseInt(target.value, 10) >= 0 ? Math.round(parseInt(target.value, 10)) : 0)}}\r\n            />\r\n            <FormHelperText id=\"Your Location\">Calcualted in MWH</FormHelperText>\r\n          </FormControl>\r\n        </Grid>\r\n      </Grid>\r\n    </form>\r\n  );\r\n}\r\n\r\ninterface Props extends UserElectricityMetrics {\r\n  handleFormChange: (date: Date, field: keyof UserElectricityMetrics, value: string | number) => void;\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { Typography, TextField, FormControl, Box } from '@material-ui/core';\r\n\r\nimport './apiKeyInput.scss';\r\nimport { AppActionType, AppContext } from 'src/Store';\r\n\r\nexport const ApiKeyInput: React.FC = () => {\r\n  const { state, dispatch } = useContext(AppContext);\r\n\r\n  return (\r\n    <div className=\"api-key-input-component content\">\r\n      <Typography gutterBottom variant=\"h4\" component=\"h2\" >\r\n        Insert Your Api Key here\r\n      </Typography>\r\n      <Box className=\"info-text\">\r\n        <Typography component=\"span\">\r\n          The API Key can be acquired at <a rel=\"noreferrer\" target=\"_blank\" href=\"https://www.carboninterface.com/\">CarbonInterface</a>\r\n        </Typography>\r\n      </Box>\r\n      <FormControl>\r\n        <TextField \r\n          id=\"standard-basic\" \r\n          label=\"Api Key\" \r\n          value={state.carbonApiKey} \r\n          onChange={({ target }) => { \r\n            dispatch({ type: AppActionType.UpdateCarbonApiKey, payload: { key: target.value }}) \r\n          }} \r\n        />\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { Grid, Typography } from '@material-ui/core';\r\nimport { Bar, Chart, Pie } from 'react-chartjs-2';\r\n\r\nimport './carbonUsage.scss';\r\nimport { AppContext } from 'src/Store';\r\n\r\nexport const CarbonUsage: React.FC = () => {\r\n  Chart.defaults.color = '#95d5b2';\r\n\r\n  const { state } = useContext(AppContext);\r\n  const calculationResultsSorted = state.carbonCalculationResults.sort((o1, o2) => o1.date.getTime() - o2.date.getTime());\r\n\r\n  const chartData = {\r\n    labels: calculationResultsSorted.map((result) => result.date.toDateString()),\r\n    datasets: [{\r\n      data: calculationResultsSorted.map((result) => result.carbonKg),\r\n      label: 'Carbon Emission in Kg',\r\n      backgroundColor: '#95d5b2',\r\n    }],\r\n  }\r\n\r\n  return (\r\n    <div className=\"carbon-usage-component content\">\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <Typography variant=\"h4\" component=\"h2\" gutterBottom>You Carbon Emission Results!</Typography>\r\n        </Grid>\r\n        { !state.carbonCalculationLoading &&\r\n          <>\r\n            <Grid item xs={12} md={6}>\r\n              <Bar data={chartData} type=\"bar\" />\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n              <Pie style={{ marginBottom: '10px' }} data={chartData} type=\"pie\" />\r\n              <Typography align=\"center\">Total: {calculationResultsSorted.map((result) => result.carbonKg).reduce((val, newVal) => val + newVal)} kg</Typography>\r\n            </Grid>\r\n          </>\r\n        }\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { Button, Tooltip } from '@material-ui/core';\r\n\r\nimport './usageCalculate.scss';\r\nimport { UserElectricityMetrics } from 'src/Models';\r\nimport { AppContext, CalculateCarbonEffect } from 'src/Store';\r\n\r\nexport const UsageCalculate: React.FC<{ data: UserElectricityMetrics[] }> = ({ data }) => {\r\n  const { state, dispatch } = useContext(AppContext);\r\n  const disabled: boolean = !state.carbonApiKey || data.some((userData) => !userData.location || !userData.usage);\r\n\r\n  return (\r\n    <div className='usage-calculate-component content'>\r\n      {/* Core Issue by Material UI, the tooltip will cause an error in conosle, but doesn't block the behaviouir */}\r\n      {/* https://github.com/mui-org/material-ui/issues/13394 */}\r\n      <Tooltip title={disabled ? `Not all dates are filled, please fill missing information` : ''} arrow >\r\n        <span>\r\n          <Button variant='contained' color='primary' disabled={disabled} onClick={() => dispatch(CalculateCarbonEffect(dispatch, state.data, 'K0DC9ahVchblZpgzT7Jg'))}>\r\n            Calculate\r\n          </Button>\r\n        </span>\r\n      </Tooltip>\r\n    </div>    \r\n  );\r\n}\r\n","import { AppActions, AppActionType } from \"src/Store\";\r\nimport { calculateElictrictyEstimate } from 'src/Services';\r\nimport { CarbonEmissionResponse, UserElectricityMetrics } from \"src/Models\";\r\n\r\nexport const CalculateCarbonEffect: (dispatch: React.Dispatch<AppActions>, userData: UserElectricityMetrics[], apiKey: string) => AppActions = (dispatch, userData, apiKey) => {\r\n  userData.forEach(async (userData) => {\r\n    await calculateElictrictyEstimate(userData.usage, userData.location, apiKey)\r\n      .then((result: { data: CarbonEmissionResponse, message?: string }) => {\r\n        // @TODO Not really happy with the way how Fetch is handling errors\r\n        // Even if the error case happens this method is being reached, which makes sense as the error\r\n        // response is still a response. Neet to find a way to treat only 200/201 response codes as correct\r\n        // and throw error on all other codes\r\n        if (result.message) { throw new Error(result.message) } // Error case @temporary\r\n\r\n        // Uncomment if mock data is needed\r\n        // result = { \r\n        //   data: {\r\n        //     id: '',\r\n        //     type: 'erstimate',\r\n        //     attributes: {\r\n        //       carbon_g: 100,\r\n        //       carbon_kg: 300,\r\n        //       carbon_lb: 100,\r\n        //       carbon_mt: 100,\r\n        //       estimated_at: ''\r\n        //     }\r\n        //   }\r\n        // };\r\n\r\n        dispatch({\r\n          type: AppActionType.CalculateDataSucceed, \r\n          payload: {\r\n            date: userData.date,\r\n            carbonG: result.data.attributes.carbon_g,\r\n            carbonKg: result.data.attributes.carbon_kg,\r\n            carbonLb: result.data.attributes.carbon_lb,\r\n            carbonMt: result.data.attributes.carbon_mt,\r\n          }\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        // @TODO Make propper error handling, \r\n        // Show popover message with the error text\r\n        // Remove Console.log when error handling is implemented\r\n        console.log(err);\r\n         \r\n        dispatch({\r\n          type: AppActionType.CalculateDataFailed,\r\n        });\r\n      });\r\n  });\r\n  \r\n  return {\r\n    type: AppActionType.CalculateWeeklyData,\r\n  };\r\n};","import { CarbonEmissionResponse } from \"src/Models\";\r\n\r\nexport const calculateElictrictyEstimate: (electricity: number, location: string, key: string) => Promise<{ data: CarbonEmissionResponse }> = (electricity, location, key) => {\r\n  return fetch('https://www.carboninterface.com/api/v1/estimates', {\r\n    method: 'POST',\r\n    body: JSON.stringify({\r\n      \"type\": \"electricity\",\r\n      \"electricity_unit\": \"mwh\",\r\n      \"electricity_value\": electricity,\r\n      \"country\": location,\r\n    }),\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${key}`\r\n    },\r\n  }).then((resp) => resp.json());\r\n};\r\n","import { useReducer } from 'react';\nimport { ThemeProvider, LinearProgress } from '@material-ui/core';\n\nimport './App.scss';\nimport { AppContext, appReducer } from 'src/Store';\nimport { defaultAppContext } from 'src/Models';\nimport { Header, DatePicker, ApiKeyInput, CarbonUsage } from 'src/Components';\nimport { UsageCalculate, } from './Components/UsageCalculate/UsageCalculate';\nimport { getAppTheme } from './Utils/MaterialUi';\n\nfunction App() {\n  const [state, dispatch] = useReducer(appReducer, defaultAppContext);\n\n  return (\n    <AppContext.Provider value={{ state, dispatch }}>\n      <ThemeProvider theme={getAppTheme()}>\n        <div className=\"App\">\n          <Header />\n          <ApiKeyInput />\n          <DatePicker />\n          <UsageCalculate data={state.data} />\n          { state.carbonCalculationLoading && \n            <div className=\"content\">\n              <LinearProgress />\n            </div> \n          }\n          { !!state.carbonCalculationResults.length && <CarbonUsage /> }\n        </div>\n      </ThemeProvider>\n    </AppContext.Provider>\n  );\n}\n\nexport default App;\n","import { createTheme } from '@material-ui/core';\r\n\r\nexport const getAppTheme = () => {\r\n  return createTheme({\r\n    palette: {\r\n      primary: {\r\n        main: '#40916c'\r\n      },\r\n      secondary: {\r\n        main: '#95d5b2'\r\n      }\r\n    },\r\n    typography: {\r\n      h3: {\r\n        fontSize: '1.2rem',\r\n        '@media (min-width: 600px)': {\r\n          fontSize: '2.4rem',\r\n        }\r\n      },\r\n      h4: {\r\n        fontSize: '1.2rem',\r\n        '@media (min-width: 600px)': {\r\n          fontSize: '2.4rem',\r\n        }\r\n      },\r\n    }\r\n  });\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}